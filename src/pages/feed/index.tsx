/* eslint-disable @next/next/no-img-element */
import { type NextPage } from "next";
import Head from "next/head";
// import Link from "next/link";
import { useSession } from "next-auth/react";
import { api } from "@/utils/api";
import {useState} from "react";
import { wrapper } from "../../store/store";
import { selectPostState, setPostState } from "../../store/postSlice";
import { useDispatch, useSelector } from "react-redux";
import { useEffect } from 'react';

const Home: NextPage = () => {
  const { data: sessionData } = useSession();

  return (
    <>
      <Head>
        <title>Feed</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="flex min-h-screen flex-col items-center justify-start bg-gradient-to-b from-[#0b202f] to-[#243c1b]">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          {sessionData &&  
            <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[3rem]">
              Latest <span className="text-[hsl(280,100%,70%)]">Shoutz</span>
            </h1> }
          <div className="grid min-w-full grid-cols-1 gap-4 sm:grid-cols-1 md:gap-8">
            {sessionData ? (
              <Media />
            ) : (
              <button
                className="max-w-[8rem] rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
                onClick={() => (window.location.href = "/")}
              >
                Back
              </button>
            )}
          </div>
        </div>
      </main>
    </>
  );
};

// export default Home;
export default wrapper.withRedux(Home);

const Media: React.FC = () => {
  const { data: sessionData } = useSession();
  // const image = sessionData?.user.image;
  const [page, setPage] = useState(0); 
  const posts = api.shouts.getAll.useQuery({id: page * 10});
  // const [render, setRender] = useState([]);
  const [toggleEdit, setToggleEdit] = useState(-1);
  // const [editMessage, setEditMessage] = useState({})
  // const postState = useSelector(selectPostState);
  // const dispatch = useDispatch();

  
  // useEffect(() => {
    // if(posts.data){
    //   const latestTen = posts.data.slice(0, 10);
    //   //console.log(latestTen, 'line 52')
    //   // dispatch(setPostState(latestTen));
    //   console.log('from line 54', postState)
    // }
   
  // }, []);
  const renderItems: JSX.Element[] = [];
  const [title, setTitle] = useState("");
  const [message, setMessage] = useState("");
  
  const deleteMutation = api.shouts.deleteShout.useMutation();

  const mutation = api.shouts.updateShout.useMutation();
  const handleItemClick = (message: string, recipient: string, title: string) => {
    mutation.mutate({ id: toggleEdit, message, recipient, title });
    window.location.reload();
  };

  const handleClick = (message: string, recipient: string, title: string) => {
    console.log('message:' + message, 'title:' + title);
    handleItemClick(message, recipient, title);
  };
  const handleNext = () => {
    setPage((prev) => prev + 1);
  };

  const handlePrev = () => {
    if (page > 0) {
      setPage((prev) => prev - 1);
    }
  };

  const deleteItem = (id: number) => {
    if(Number(id)){
      deleteMutation.mutate({ id: Number(id) })
      window.location.reload()
    }
  };

  if (posts.data) {
    posts.data.forEach((el, i) => {
      // console.log(el);
      renderItems.push(
        <div
         
          key={`post-${i}`}
         
          className="flex min-w-full flex-col gap-5 rounded-xl bg-white/10 p-10 text-white hover:bg-white/20"
        
        >
          <p>{el.author.name}</p>
          <div>
            {el.authorPic && (
              <img
                alt="some-alt-text"
                className="max-w-[3rem]"
                src={el.authorPic}
              ></img>
            )}
          </div>
          <div>
          {toggleEdit !== el.id ? (
            <>
              <h3 className="text-2xl font-bold">{el.title}</h3>
              <div className="text-lg">{el.message}</div>
            </>
          ) : (
            <>
              <label className="sr-only">Your title</label>
              <textarea
                onChange={(e) => {
                  setTitle(e.target.value);
                }}
                id="title"
                className="mb-[1rem] w-full border-0 bg-white px-0 text-sm text-gray-900 focus:ring-0 dark:bg-gray-800 dark:text-white dark:placeholder-gray-400"
                placeholder="Create a Title"
                value={title}
                required
              >
              </textarea>
              <label className="sr-only">Your comment</label>
              <textarea
                onChange={(e) => setMessage(e.target.value)}
                id="comment"
                className="w-full border-0 bg-white px-0 text-sm text-gray-900 focus:ring-0 dark:bg-gray-800 dark:text-white dark:placeholder-gray-400"
                placeholder="Write a comment..."
                value={message}
                required
              >
              </textarea>
              <button
                onClick={(e) => {
                  // e.preventDefault();
                  handleClick(message, 'Salem', title);
                }}
                className="max-w-[8rem] rounded-full bg-lime-500 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
              >
                Submit
              </button>
            </>
          )}
          {sessionData &&
            sessionData.user &&
            sessionData.user.id &&
            sessionData.user.name === el.author.name && (
              <button
                className="max-w-[8rem] rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
                onClick={() => {
                  console.log('in edit', el.id);
                  setToggleEdit(el.id);
                  // setEditMessage(el);
                  setMessage(el.message);
                  setTitle(el.title);
                }}
              >
                {/* {sessionData ? "Sign out" : "Sign in"} */}
                Edit
              </button>
            )}
          {sessionData &&
            sessionData.user &&
            sessionData.user.id &&
            sessionData.user.name === el.author.name && (
              <button
                className="max-w-[8rem] rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
                onClick={() => deleteItem(el.id)}
                // onClick={sessionData ? () => void signOut() : () => void signIn()}
              >
                {/* {sessionData ? "Sign out" : "Sign in"} */}
                Delete
              </button>
            )}
            </div>
        </div>
      );
    });
  }

  // dispatch(setPostState(renderItems));
  console.log('hi');

  return (
    <div className="flex min-w-full flex-col gap-5 rounded-xl bg-white/10 p-10 text-white hover:bg-white/20">
      {renderItems}
      <div style={{ display: "flex", justifyContent: "space-between" }}>
      {page > 0 && (
        <button
          className="max-w-[8rem] rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
          onClick={handlePrev}
        >
          Previous Page
        </button>
      )}
      {renderItems.length > 0 && (
        <button
          className="max-w-[8rem] rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
          onClick={handleNext}
        >
          Next Page
        </button>
      )}
      </div>
    </div>
  );
};
